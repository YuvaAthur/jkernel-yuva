################################################################################
#
# File:        qjide.py
# Author:      Martin Saurer, 18.02.2016
# Description: Simple Python Web Server for Qooxdoo J IDE.
#
# License:     GPL Version 3 (see gpl3.txt)
#
# Note 1:      To enforce python run in 32bit mode on Mac OS X,
#              set the following environment variable:
#              export VERSIONER_PYTHON_PREFER_32_BIT=yes
#
# Note 2:      Ensure that the following J add-ons are installed:
#              convert/json
#              ide/jhs
#              graphics/bmp
#              graphics/viewmat
#              labs/labs
#
# Note 3:      ***************************************************
#              ***          DO NOT EDIT THIS FILE !!!          ***
#              ***                                             ***
#              *** PLEASE COPY qjide.cfg.template TO qjide.cfg ***
#              ***    AND EDIT qjide.cfg TO MEET YOUR NEEDS    ***
#              ***************************************************
#
################################################################################

################################################################################
# Import modules
################################################################################

import os
import sys
import cgi
import json
import time
import codecs
import warnings
import threading
import webbrowser
import subprocess

from ctypes import *

if sys.version_info[0] == 2:
   from BaseHTTPServer import BaseHTTPRequestHandler
   from BaseHTTPServer import HTTPServer
else:
   from http.server    import BaseHTTPRequestHandler
   from http.server    import HTTPServer

################################################################################
# Default setup
################################################################################

# Setup web server
SrvHost = '127.0.0.1'       # Listening IP address or host name
SrvPort = 8080              # Application server port to listen on
HlpPort = SrvPort + 1       # Help document server port to listen on
DocRoot = ''                # Document root (other than sub dir webapp)
HlpRoot = ''                # Help doc root (Def: <JInsFol>/addons/docs/help)
SrvMesg = False             # Enable/Disable web server messages
VerBose = False             # Enable/Disable verbose messages

# Setup web client
WebClnt = '<default>'

# Editor font size
EditorFontSize = 12

# Console font size
ConsoleFontSize = 16

# J installation folder
JInsFol = ''

# J binaries folder
JBinFol = 'bin'

# J user folder
JUsrFol = ''

# J multi session
JMulSes = False

# Load J script at startup
WwdStart = ''

################################################################################
# Utility functions (Mainly for Python 2/3 compatibility)
################################################################################

# Print exception info
def print_exception_info():
   typ,val,trb = sys.exc_info()
   fil = os.path.split(trb.tb_frame.f_code.co_filename)[1]
   lin = trb.tb_lineno
   est = ('Exception: ' + str(typ) + ': ' + str(val) + ' / in ' + str(fil) +
         ':' + str(lin))
   print('>>>>>>>> ' + est)

# Encode to utf-8 if python version is 2
def qjide_encode2(s):
   if sys.version_info[0] == 2:
      return s.encode('utf-8')
   else:
      return s

# Encode to utf-8 if python version is not 2 (assumed 3)
def qjide_encode3(s):
   if sys.version_info[0] == 2:
      return s
   else:
      if isinstance(s,str):
         return s.encode('utf-8')
      else:
         return s

# Decode to bytes if python version is 2
def qjide_decode2(s):
   if sys.version_info[0] == 2:
      return s.decode('utf-8','replace')
   else:
      return s

# Decode to bytes if python version is not 2 (assumed 3)
def qjide_decode3(s):
   if sys.version_info[0] == 2:
      return s
   else:
      if isinstance(s,str):
         return s
      else:
         return s.decode('utf-8','replace')

# Decode unicode escapes in python 2
def qjide_decode_escapes(s):
   if sys.version_info[0] == 2:
      return s.decode('unicode-escape')
   else:
      return s

# Dump json object to string, respecting python version
def qjide_json_dumps(o):
   if sys.version_info[0] == 2:
      return json.dumps(o,encoding='utf-8')
   else:
      return json.dumps(o)

################################################################################
# Internal setup
################################################################################

# We ignore warnings (for now ;-)
warnings.filterwarnings('ignore')

# Read config file qjide.cfg
if os.path.exists(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                               'qjide.cfg')):
   cfg = os.path.join(os.path.dirname(os.path.realpath(__file__)),'qjide.cfg')
   if sys.version_info[0] == 2:
      execfile(cfg)
   else:
      with open(cfg) as fp:
         code = compile(fp.read(),cfg,'exec')
         exec(code)
else:
   print('')
   print('*' * 80)
   print('* Configuration file: ' +
         os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                      'qjide.cfg') + ' does not exist!')
   print('*' * 80)
   print('')
   if __name__  == '__main__':
      sys.exit(1)

# If DocRoot is empty, we take this scripts path as DocRoot
if DocRoot == '':
   DocRoot = os.path.join(os.path.dirname(os.path.realpath(__file__)),'webapp')
if DocRoot == '':
   DocRoot = os.path.join(os.getcwd(),'webapp')

# If HlpRoot is empty, we generate it from JInsFol
if HlpRoot == '':
   HlpRoot = os.path.join(JInsFol,'addons','docs','help')

# J interpreter objects/threads
JObjects = {}

# Plot html data and dirty flag
PlotHtml = {}
PlotSent = {}

# Help Server
HelpServ = None

################################################################################
# J interpreter class
################################################################################

# J interpreter class
class J():

   # Constants
   MTYOFM   = 1   # Formatted result array output
   MTYOER   = 2   # Error output
   MTYOLOG  = 3   # Output log
   MTYOSYS  = 4   # System assertion failure
   MTYOEXIT = 5   # Exit
   MTYOFILE = 6   # Output 1!:2[2

   SMWIN    = 0   # Windows front end
   SMJAVA   = 2   # Java front end
   SMCON    = 3   # Console (or shared library)

   # Constructor
   def __init__(self,key='main',asn=False):

      # Globals
      global JUsrFol

      # Save client address
      self.CipAddr = key
      self.IsAsync = asn

      # Object creation and last use timestamp
      self.OCreTim = time.strftime('%Y-%m-%d %H:%M:%S')
      self.OLasAcc = self.OCreTim

      # Members for input/output
      self.JIsBusy = False
      self.JInpRdy = False
      self.JOutRdy = False
      self.JIolRun = True
      self.JWForIn = True
      self.JCurDir = ''
      self.JProStr = ''
      self.JInpStr = ''
      self.JOutStr = ''

      # J Binaries Folder (absolute or relative (to JInsFol) path)
      self.JBinFol = JBinFol

      # J Profile (absolute or relative (to JBinFol) path)
      self.JProFil = 'profile.ijs'

      # Build J Dynamic Library name
      if sys.platform.startswith('win'):
         self.JDynLib = 'j.dll'
      elif sys.platform.startswith('darwin'):
         self.JDynLib = 'libj.dylib'
      elif sys.platform.startswith('linux'):
         self.JDynLib = 'libj.so'
      else:
         self.JDynLib = ''

      # Build J path names
      if os.path.isabs(self.JBinFol):
         self.JBin = os.path.join(self.JBinFol)
         self.JLib = os.path.join(self.JBinFol,self.JDynLib)
         if os.path.isabs(self.JProFil):
            self.JPro = self.JProFil
         else:
            self.JPro = os.path.join(self.JBinFol,self.JProFil)
      else:
         self.JBin = os.path.join(JInsFol,self.JBinFol)
         self.JLib = os.path.join(JInsFol,self.JBinFol,self.JDynLib)
         if os.path.isabs(self.JProFil):
            self.JPro = self.JProFil
         else:
            self.JPro = os.path.join(JInsFol,self.JBinFol,self.JProFil)

      # Declare types for calling JGetM
      self.JType = pointer(c_long())
      self.JRank = pointer(c_long())
      self.JShap = pointer(c_long())
      self.JData = pointer(c_char_p())

      # Declare J callback types
      if os.name == 'nt':
         self.JInputType  = WINFUNCTYPE(c_char_p,c_long,c_char_p)
         self.JWdType     = WINFUNCTYPE(c_long,c_long,c_long,c_void_p,c_void_p)
         self.JOutputType = WINFUNCTYPE(None,c_long,c_long,c_char_p)
      else:
         self.JInputType  = CFUNCTYPE(c_char_p,c_long,c_char_p)
         self.JWdType     = CFUNCTYPE(c_long,c_long,c_long,c_void_p,c_void_p)
         self.JOutputType = CFUNCTYPE(None,c_long,c_long,c_char_p)

      # Declare J callback functions
      self.JInputFunc    = self.JInputType(self.JInput)
      self.JWdFunc       = self.JWdType(self.JWd)
      self.JOutputFunc   = self.JOutputType(self.JOutput)
      self.JCallBacks    = [self.JOutputFunc,
                            self.JWdFunc,
                            self.JInputFunc,
                            0,
                            c_void_p(J.SMCON)]
      self.JCBArTypes    = (c_void_p * len(self.JCallBacks))
      self.JCBArArray    = self.JCBArTypes()
      self.JCBArArray[0] = cast(self.JCallBacks[0],c_void_p)
      self.JCBArArray[1] = cast(self.JCallBacks[1],c_void_p)
      self.JCBArArray[2] = cast(self.JCallBacks[2],c_void_p)
      self.JCBArArray[3] = c_void_p(self.JCallBacks[3])
      self.JCBArArray[4] = self.JCallBacks[4]

      # Load J dynamic link library / shareable object
      if os.name == 'nt':
         self.JDll = windll.LoadLibrary(self.JLib)
      else:
         self.JDll = cdll.LoadLibrary(self.JLib)

      # Declare result type of JInit (this is mandatory !!!)
      self.JDll.JInit.restype = c_void_p

      # Initialize J engine
      self.JSession = c_void_p(self.JDll.JInit())

      # Register callback functions
      self.JDll.JSM(self.JSession,self.JCBArArray)

      # Setup J environment
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('ARGV_z_ =: \'\''))
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('BINPATH_z_ =: \'' + self.JBin + '\''))
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('0!:0 <\'' + self.JPro + '\''))

      # Load qjide.ijs
      self.IjsFile = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                  'qjide.ijs')
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('load \'' + self.IjsFile + '\''))

      # Get J user folder
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('tmpstr_qjide_ =: jpath \'~user\''))
      s = self.JDll.JGetM(self.JSession,
                          qjide_encode3('tmpstr_qjide_'),
                          self.JType,
                          self.JRank,
                          self.JShap,
                          self.JData)
      s = string_at(self.JData.contents.value)
      s = qjide_decode3(s)
      if os.name == 'nt':
         s = s.replace('/','\\')
      else:
         s = s.replace('\\','/')
      JUsrFol = s

      # Set editor and console font sizes
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('EDITOR_FONT_SIZE_qjide_  =: ' +
                        str(EditorFontSize )))
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('CONSOLE_FONT_SIZE_qjide_ =: ' +
                        str(ConsoleFontSize)))

      # Set client ip address
      s = self.JDll.JDo(self.JSession,
                        qjide_encode3('cipaddr_qjide_ =: \'' +
                        self.CipAddr + '\''))

      # Finally, we start the I/O loop as a thread
      if self.IsAsync:
         self.JThread = threading.Thread(target=self.JIOLoop)
         self.JThread.start()

   #############################################################################
   # I/O callback functions
   #############################################################################

   # J input callback
   def JInput(self,j,p):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      self.JProStr = p
      self.JWForIn = True
      while not self.JInpRdy:
         time.sleep(0.01)
         if not self.JIolRun:
            self.JinpStr = ''
            break
      cmd = self.JInpStr
      self.JInpStr = ''
      self.JInpRdy = False
      self.JWForIn = False
      return cmd

   # J output callback
   def JOutput(self,j,t,s):
      # Globals
      global JObjects
      # Handle exit
      if t == J.MTYOEXIT:
         self.JIolRun = False
         if self.CipAddr in JObjects:
            del JObjects[self.CipAddr]
      else:
         # Handle output
         self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
         self.JOutStr += qjide_decode3(s)
         self.JOutRdy = True

   # J window driver callback
   # In fact, we use Jwd as an entry point for custom callbacks, using
   # J foreign function 11!:x
   # We read x (int) and the string in struct pa
   # We do not write anything to struct pz
   # Return is always 0
   # mode = 0: Session Info (JObjects)
   # mode = x: ...
   # parm = <str>: String Parameter to 11!:x '<str>'
   def JWd(self,j,x,pa,pz):

      # Get mode
      mode = x

      # Get string parameter
      sptr = pointer(c_long(pa+8*sizeof(c_long)))
      parm = string_at(sptr.contents.value)
      parm = qjide_decode3(parm)

      # Just for debugging
      if VerBose == True:
         print('>>> J 11!:x')
         print('   mode = ' + repr(mode))
         print('   parm = "' + parm + '"')
         print('<<< J 11!:x')

      if mode == 0:
         jobs     = []
         for key in JObjects:
            job = []
            if JObjects[key].CipAddr == self.CipAddr:
               job.append('*')
            else:
               job.append(' ')
            job.append(JObjects[key].CipAddr)
            job.append(JObjects[key].OCreTim)
            job.append(JObjects[key].OLasAcc)
            job.append(JObjects[key].JBinFol)
            job.append(JObjects[key].JProFil)
            job.append(JObjects[key].Getd() )
            jobs.append(job)
         jobsjson = qjide_json_dumps(jobs)
         s = self.Exec('session_info_qjide_ =: dec_json \'' + jobsjson + '\'')

      # Return 0 (always)
      return 0

   # J I/O loop
   def JIOLoop(self):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      while self.JIolRun:
         try:
            cmd = self.JInput(self.JSession,qjide_encode3('   '))
            self.JIsBusy = True
            self.JDll.JDo(self.JSession,cmd)
            self.JProStr = '   '
            self.JIsBusy = False
         except:
            print_exception_info()
         time.sleep(0.01)

   #############################################################################
   # Utility functions
   #############################################################################

   # Do a J sentence
   def Exec(self,cmd):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      s = self.JDll.JDo(self.JSession,c_char_p(qjide_encode3(cmd)))
      return s

   # Get a string from a J variable
   def Gets(self,var):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      s = self.JDll.JGetM(self.JSession,qjide_encode3(var),
                          self.JType,self.JRank,self.JShap,self.JData)
      s = string_at(self.JData.contents.value)
      s = qjide_decode3(s)
      return s

   # Send a command to the I/O loop
   def Send(self,cmd):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      self.JInpStr = qjide_encode3(cmd)
      self.JInpRdy = True

   # Receive output
   def Recv(self):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      out = ''
      if self.JOutRdy:
         out = self.JOutStr
         self.JOutStr = ''
         self.JOutRdy = False
      return out

   # Drop any output
   def Drop(self):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      if self.JOutRdy:
         self.JOutStr = ''
         self.JOutRdy = False

   # J prompt string
   def Prom(self):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      return qjide_decode3(self.JProStr)

   # Set J's current directory
   def Setd(self,dir):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      self.JCurDir = dir

   # Get J's current directory
   def Getd(self):
      self.OLasAcc = time.strftime('%Y-%m-%d %H:%M:%S')
      return self.JCurDir

################################################################################
# Help Handler
################################################################################

# Help Handler
class HelpHandler(BaseHTTPRequestHandler):

   # Override the default method address_string
   # The original has some performance issues
   def address_string(self):
      host,port = self.client_address[:2]
      return host

   # Override the default method log_message
   def log_message(self,format,*args):
      if SrvMesg:
         sys.stderr.write("%s - - [%s] %s\n" %
                          (self.address_string(),
                           self.log_date_time_string(),
                           format%args))

   # Process GET requests ######################################################
   def do_GET(self):

      # Check and set default path
      if self.path == '/':
         self.path = '/index.html'

      # Error Handler
      try:

         # Initialize default mime type
         MimeType = ''
         SendBack = False

         # Check file extension and set mime type

         # Just for debugging
         if VerBose == True:
            print('GET  <<< ' + self.path)

         if self.path.endswith('.html') or self.path.endswith('.htm'):
            MimeType = 'text/html'
            SendBack = True

         if self.path.endswith('.jpg') or self.path.endswith('.jpeg'):
            MimeType = 'image/jpg'
            SendBack = True

         if self.path.endswith('.png'):
            MimeType = 'image/png'
            SendBack = True

         if self.path.endswith('.gif'):
            MimeType = 'image/gif'
            SendBack = True

         if self.path.endswith('.ico'):
            MimeType = 'image/icon'
            SendBack = True

         if self.path.endswith('.js'):
            MimeType = 'application/javascript'
            SendBack = True

         if self.path.endswith('.css'):
            MimeType = 'text/css'
            SendBack = True

         if self.path.endswith('.woff'):
            MimeType = 'application/x-font-woff'
            SendBack = True

         # Should we send something back to the browser?
         if SendBack == True:

            # Build file path
            if os.name == 'nt':
               fn = HlpRoot + self.path.replace('/','\\')
            else:
               fn = HlpRoot + self.path

            # Just for debugging
            if VerBose == True:
               print('SEND >>> ' + fn)

            # Open file, read it, and close it
            fp = open(fn,'rb',0)
            tx = fp.read()
            ln = str(len(tx))
            fp.close()

            # Send response
            self.send_response(200)
            self.send_header('Content-type'  ,MimeType)
            self.send_header('Content-length',ln      )
            self.end_headers()
            self.wfile.write(qjide_encode3(tx))
            self.wfile.flush()

            # Return
            return

      except IOError:
         self.send_error(404,'File Not Found: %s' % self.path)

# Start HTTP Help server
def StartHelpServer():
   global HelpServ
   HelpServ = HTTPServer((SrvHost,HlpPort),HelpHandler)
   HelpServ.serve_forever()

################################################################################
# Application Handler
################################################################################

# Application Handler
class ApplicationHandler(BaseHTTPRequestHandler):

   # Override the default method address_string
   # The original has some performance issues
   def address_string(self):
      host,port = self.client_address[:2]
      return host

   # Override the default method log_message
   def log_message(self,format,*args):
      if SrvMesg:
         sys.stderr.write("%s - - [%s] %s\n" %
                           (self.address_string(),
                           self.log_date_time_string(),
                           format%args))

   # Process GET requests ######################################################
   def do_GET(self):

      # Check and set default path
      if self.path == '/':
         self.path = '/index.html'

      # Error Handler
      try:

         # Get client's IP address
         CipAddr = str(self.client_address[0])

         # Check for J multi session:
         if JMulSes:
            # If there is no corresponding object in JObjects, create it
            if CipAddr not in JObjects:
               JObjects[CipAddr] = J(key=CipAddr,asn=True)
               PlotHtml[CipAddr] = ''
               PlotSent[CipAddr] = False
         else:
            # The one and only J object (main)
            CipAddr = 'main'
            # If there is no corresponding object in JObjects, create it
            if CipAddr not in JObjects:
               JObjects[CipAddr] = J(key=CipAddr,asn=True)
               PlotHtml[CipAddr] = ''
               PlotSent[CipAddr] = False

         # Initialize default mime type
         MimeType = ''
         SendBack = False

         # Check file extension and set mime type

         # Just for debugging
         if VerBose == True:
            print('GET  <<< ' + self.path)

         # Special handling of viewmat images (.png since J804)
         if self.path.startswith('/~temp/viewmat'):
            MimeType = 'image/png'
            SendBack = True

         if self.path.endswith('.html') or self.path.endswith('.htm'):
            MimeType = 'text/html'
            SendBack = True

         if self.path.endswith('.jpg') or self.path.endswith('.jpeg'):
            MimeType = 'image/jpg'
            SendBack = True

         if self.path.endswith('.png'):
            MimeType = 'image/png'
            SendBack = True

         if self.path.endswith('.gif'):
            MimeType = 'image/gif'
            SendBack = True

         if self.path.endswith('.ico'):
            MimeType = 'image/icon'
            SendBack = True

         if self.path.endswith('.bmp'):
            MimeType = 'image/bitmap'
            SendBack = True

         if self.path.endswith('.js'):
            MimeType = 'application/javascript'
            SendBack = True

         if self.path.endswith('.css'):
            MimeType = 'text/css'
            SendBack = True

         if self.path.endswith('.woff'):
            MimeType = 'application/x-font-woff'
            SendBack = True

         if self.path == '/$$$plot$$$':
            MimeType = 'text/html'
            SendBack = True

         # Should we send something back to the browser?
         if SendBack == True:

            # Special handling of plot output
            if self.path == '/$$$plot$$$':

               # Set send parameters
               try:
                  tx = PlotHtml[CipAddr]
                  ln = str(len(tx))
               except:
                  tx = ''
                  ln = 0

            # Special handling of viewmat bitmaps
            elif self.path.startswith('/~temp/viewmat.bmp'):
               s = JObjects[CipAddr].Exec('tmpstr_qjide_ =: jpath \'~temp\'')
               s = JObjects[CipAddr].Gets('tmpstr_qjide_')
               if os.name == 'nt':
                  dir = s.replace('/','\\')
               else:
                  dir = s.replace('\\','/')
               fn = os.path.join(dir,'viewmat.bmp')

               # Just for debugging
               if VerBose == True:
                  print('SEND >>> ' + fn)

               # Open file, read it, and close it
               fp = open(fn,'rb',0)
               tx = fp.read()
               ln = str(len(tx))
               fp.close()

            # Special handling of viewmat images (.png since J804)
            elif self.path.startswith('/~temp/viewmat'):
               n = os.path.basename(self.path.split('?')[0])
               s = JObjects[CipAddr].Exec('tmpstr_qjide_ =: jpath \'~temp\'')
               s = JObjects[CipAddr].Gets('tmpstr_qjide_')
               if os.name == 'nt':
                  dir = s.replace('/','\\')
               else:
                  dir = s.replace('\\','/')
               fn = os.path.join(dir,n)

               # Just for debugging
               if VerBose == True:
                  print('SEND >>> ' + fn)

               # Open file, read it, and close it
               fp = open(fn,'rb',0)
               tx = fp.read()
               ln = str(len(tx))
               fp.close()

            # All other get requests
            else:

               # Build file path
               if os.name == 'nt':
                  fn = DocRoot + self.path.replace('/','\\')
               else:
                  fn = DocRoot + self.path

               # Just for debugging
               if VerBose == True:
                  print('SEND >>> ' + fn)

               # Open file, read it, and close it
               fp = open(fn,'rb',0)
               tx = fp.read()
               ln = str(len(tx))
               fp.close()

            # Send response
            self.send_response(200)
            self.send_header('Content-type'  ,MimeType)
            self.send_header('Content-length',ln      )
            self.end_headers()
            self.wfile.write(qjide_encode3(tx))
            self.wfile.flush()

            # Return
            return

      except IOError:
         self.send_error(404,'File Not Found: %s' % self.path)

   # Process POST requests #####################################################
   def do_POST(self):

      # Globals
      global PlotHtml,PlotSent

      # Error handler
      try:

         # Get client's IP address
         CipAddr = str(self.client_address[0])

         # Check for J multi session:
         if JMulSes:
            # If there is no corresponding object in JObjects, create it
            if CipAddr not in JObjects:
               JObjects[CipAddr] = J(key=CipAddr,asn=True)
               PlotHtml[CipAddr] = ''
               PlotSent[CipAddr] = False
         else:
            # The one and only J object (main)
            CipAddr = 'main'
            # If there is no corresponding object in JObjects, create it
            if CipAddr not in JObjects:
               JObjects[CipAddr] = J(key=CipAddr,asn=True)
               PlotHtml[CipAddr] = ''
               PlotSent[CipAddr] = False

         # Read CGI data
         CgiData = cgi.FieldStorage(
                      fp      = self.rfile,
                      headers = self.headers,
                      environ = {'REQUEST_METHOD':'POST',
                                 'CONTENT_TYPE':self.headers['Content-Type']})

         # Extract JSON string, and create JSON object
         JsonStr = CgiData.getvalue('json')
         JsonObj = json.loads(JsonStr,encoding='utf-8')

         # Just for debugging
         if VerBose == True:
            print('POST <<< ' + self.path)
            print('FROM <<< ' + CipAddr)

         # Invoke action #######################################################
         if self.path == '/handler':

            # Just for debugging
            if VerBose == True:
               try:
                  print('fcode = ' + JsonObj['head']['fcode'])
                  print('scode = ' + JsonObj['head']['scode'])
                  print('data  = ' + str(JsonObj['data']))
               except:
                  print_exception_info()

            ####################################################################
            # Check                                                            #
            ####################################################################
            if JsonObj['head']['fcode'] == 'check':
               s = JObjects[CipAddr].Exec('tmpstr_qjide_ =: 9!:14\'\'')
               s = JObjects[CipAddr].Gets('tmpstr_qjide_')
               JsonObj['head']['rcode'] = 'INF'
               JsonObj['head']['rmesg'] = ('Connected to: ' +
                                          JObjects[CipAddr].JLib +
                                          ' / ' + s + '.')

            ####################################################################
            # Font size of editor and console                                  #
            ####################################################################
            if JsonObj['head']['fcode'] == 'fontsize':

               # Editor font size
               if JsonObj['head']['scode'] == 'editor':
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json EDITOR_FONT_SIZE_qjide_')
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'SIZ'
                  JsonObj['data']          = s

               # Console font size
               if JsonObj['head']['scode'] == 'console':
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json CONSOLE_FONT_SIZE_qjide_')
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'SIZ'
                  JsonObj['data']          = s

            ####################################################################
            # Handle navi requests                                             #
            ####################################################################
            if JsonObj['head']['fcode'] == 'navi':

               # Goto directory and return its files ###########################
               if JsonObj['head']['scode'] == 'goto':
                  # If JCurDir is empty get used dir from J
                  if JObjects[CipAddr].Getd() == '':
                     s = JObjects[CipAddr].Exec(
                         'tmpstr_qjide_ =: jpath \'~user\'')
                     s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                     if os.name == 'nt':
                        JObjects[CipAddr].Setd(s.replace('/','\\'))
                     else:
                        JObjects[CipAddr].Setd(s.replace('\\','/'))
                  # Check data and change directory or send file contents
                  if JsonObj['data'] == '.':
                     # Get all files from directory
                     fls = os.listdir(JObjects[CipAddr].Getd())
                     # Mark directories
                     for i in range(0,len(fls)):
                        if os.path.isdir(os.path.join(JObjects[CipAddr].Getd(),
                           fls[i])):
                           fls[i] = fls[i] + '/'
                        fls[i] = qjide_decode_escapes(fls[i])
                     # Sort file array
                     fls.sort()
                     # Prepare return object
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = 'DIR'
                     JsonObj['data']          = {
                        'path':JObjects[CipAddr].Getd(),'files':fls}
                  elif JsonObj['data'] == '..':
                     # Update JCurDir
                     JObjects[CipAddr].Setd(
                        os.path.dirname(JObjects[CipAddr].Getd()))
                     # Get all files from directory
                     fls = os.listdir(JObjects[CipAddr].Getd())
                     # Mark directories
                     for i in range(0,len(fls)):
                        if os.path.isdir(os.path.join(JObjects[CipAddr].Getd(),
                           fls[i])):
                           fls[i] = fls[i] + '/'
                        fls[i] = qjide_decode_escapes(fls[i])
                     # Sort file array
                     fls.sort()
                     # Prepare return object
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = 'DIR'
                     JsonObj['data']          = {
                        'path':JObjects[CipAddr].Getd(),'files':fls}
                  elif os.path.isdir(os.path.join(JObjects[CipAddr].Getd(),
                     JsonObj['data'])):
                     # Update JCurDir
                     JObjects[CipAddr].Setd(
                        os.path.join(JObjects[CipAddr].Getd(),JsonObj['data']))
                     # Get all files from directory
                     fls = os.listdir(JObjects[CipAddr].Getd())
                     # Mark directories
                     for i in range(0,len(fls)):
                        if os.path.isdir(os.path.join(JObjects[CipAddr].Getd(),
                           fls[i])):
                           fls[i] = fls[i] + '/'
                        fls[i] = qjide_decode_escapes(fls[i])
                     # Sort file array
                     fls.sort()
                     # Prepare return object
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = 'DIR'
                     JsonObj['data']          = {
                        'path':JObjects[CipAddr].Getd(),'files':fls}
                  else:
                     # Get file contents
                     fil = os.path.join(JObjects[CipAddr].Getd(),
                           JsonObj['data'])
                     ext = os.path.splitext(fil)[1].lower()
                     suc = True
                     if ext == '.ijs' or ext == '.txt' or ext == '.cfg':
                        try:
                           fip = open(fil,mode='rb')
                           tex = fip.read()
                           fip.close()
                        except:
                           suc = False
                        if suc:
                           try:
                              tex = tex.decode('utf-8')
                           except:
                              suc = False
                           if suc:
                              # Prepare return object
                              JsonObj['head']['rcode'] = 'INF'
                              JsonObj['head']['rmesg'] = 'FIL'
                              JsonObj['data']          = {'file':fil,'text':tex}
                           else:
                              # Prepare return object
                              JsonObj['head']['rcode'] = 'ERR'
                              JsonObj['head']['rmesg'] = \
                                 'Cannot convert file contents to unicode.'
                        else:
                           # Prepare return object
                           JsonObj['head']['rcode'] = 'ERR'
                           JsonObj['head']['rmesg'] = \
                              'Cannot read file contents.'
                     else:
                        # Prepare return object
                        JsonObj['head']['rcode'] = 'ERR'
                        JsonObj['head']['rmesg'] = \
                           'Cannot open file of type: ' + ext

               # Goto home directory (J user directory) ########################
               if JsonObj['head']['scode'] == 'home':
                  # Set JCurDir
                  s = JObjects[CipAddr].Exec('tmpstr_qjide_ =: jpath \'~user\'')
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  if os.name == 'nt':
                     JObjects[CipAddr].Setd(s.replace('/','\\'))
                  else:
                     JObjects[CipAddr].Setd(s.replace('\\','/'))
                  # Get all files from directory
                  fls = os.listdir(JObjects[CipAddr].Getd())
                  # Mark directories
                  for i in range(0,len(fls)):
                     if os.path.isdir(os.path.join(JObjects[CipAddr].Getd(),
                        fls[i])):
                        fls[i] = fls[i] + '/'
                     fls[i] = qjide_decode_escapes(fls[i])
                  # Sort file array
                  fls.sort()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'DIR'
                  JsonObj['data']          = {
                     'path':JObjects[CipAddr].Getd(),'files':fls}

               # Get all locales ###############################################
               if JsonObj['head']['scode'] == 'locales':
                  # Get locales
                  s = JObjects[CipAddr].Exec('tmpobj_qjide_ =: 18!:1 (0)')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'LOC'
                  JsonObj['data']          = s

               # Get all definitions of a given locale #########################
               if JsonObj['head']['scode'] == 'defs':
                  # Get locales
                  loc = qjide_encode2(JsonObj['data'])
                  s = JObjects[CipAddr].Exec(
                      'curloc_qjide_ =: 18!:5\'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: 18!:4 <\'' + loc + '\'')
                  s = JObjects[CipAddr].Exec(
                      'locnms_qjide_ =: 4!:1 (3)')
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: 18!:4 curloc_qjide_')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json locnms_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'DEF'
                  JsonObj['data']          = s

               # Get script source of given definition #########################
               if JsonObj['head']['scode'] == 'script':
                  # Script name
                  scrnam = ''
                  defnam = qjide_encode2(JsonObj['data'])
                  # Get locales
                  s = JObjects[CipAddr].Exec(
                      'scridx_qjide_ =: 4!:4 <\'' + defnam + '\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json scridx_qjide_')
                  s = JObjects[CipAddr].Gets(
                      'tmpstr_qjide_')
                  if s != '_1':
                     s = JObjects[CipAddr].Exec(
                         'scrnam_qjide_ =: ' + s + '{4!:3 \'\'')
                     s = JObjects[CipAddr].Exec(
                         'tmpstr_qjide_ =: >scrnam_qjide_')
                     s = JObjects[CipAddr].Gets(
                         'tmpstr_qjide_')
                     scrnam = s
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'DEF'
                  JsonObj['data']          = scrnam

               # Get source of a given definition ##############################
               if JsonObj['head']['scode'] == 'source':
                  # Get source
                  src = qjide_encode2(JsonObj['data'])
                  s = JObjects[CipAddr].Exec(src)
                  # Receive output
                  out = JObjects[CipAddr].Recv()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'SRC'
                  JsonObj['data']          = out

            ####################################################################
            # Handle file requests                                             #
            ####################################################################
            if JsonObj['head']['fcode'] == 'file':

               # Save file #####################################################
               if JsonObj['head']['scode'] == 'save':
                  # File name and file contents
                  fil = JsonObj['data']['file']
                  tex = JsonObj['data']['text']
                  suc = True
                  # Write file
                  try:
                     fip = codecs.open(fil,mode='w',encoding='utf-8')
                     fip.write(tex)
                     fip.close()
                  except IOError:
                     suc = False
                  # Prepare return object
                  if suc:
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = ''
                     JsonObj['data']          = ''
                  else:
                     JsonObj['head']['rcode'] = 'ERR'
                     JsonObj['head']['rmesg'] = 'Cannot write file: ' + fil
                     JsonObj['data']          = ''

            ####################################################################
            # Handle URL requests                                              #
            ####################################################################
            if JsonObj['head']['fcode'] == 'url':

               # Help URL ######################################################
               if JsonObj['head']['scode'] == 'help':
                  out = 'http://' + SrvHost + ':' + str(HlpPort) + '/index.htm'
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = ''
                  JsonObj['data']          = out

               # Plot URL ######################################################
               if JsonObj['head']['scode'] == 'plot':
                  out = 'http://' + SrvHost + ':' + str(SrvPort) + '/$$$plot$$$'
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = ''
                  JsonObj['data']          = out

            ####################################################################
            # Handle lab requests                                              #
            ####################################################################
            if JsonObj['head']['fcode'] == 'labs':

               # Get lab names #################################################
               if JsonObj['head']['scode'] == 'available':
                  # Get labs
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: getlabs_qjide_\'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'AVA'
                  JsonObj['data']          = s

               # Get lab files #################################################
               if JsonObj['head']['scode'] == 'files':
                  # Get labs
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: LABFILES_qjide_')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'FLS'
                  JsonObj['data']          = s

               # Run lab #######################################################
               if JsonObj['head']['scode'] == 'start':
                  # Start lab
                  lab = qjide_encode2(JsonObj['data'])
                  s = JObjects[CipAddr].Exec('labinit_jlab_ \'' + lab + '\'')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'RUN'
                  JsonObj['data']          = ''

               # Advance current lab ###########################################
               if JsonObj['head']['scode'] == 'advance':
                  # Advance lab
                  s = JObjects[CipAddr].Exec('labnext_jlab_\'\'')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ADV'
                  JsonObj['data']          = ''

               # Stop lab ######################################################
               if JsonObj['head']['scode'] == 'stop':
                  # Stop lab
                  s = JObjects[CipAddr].Exec('labreset_jlab_\'\'')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'STP'
                  JsonObj['data']          = ''

            ####################################################################
            # Handle package manager requests                                  #
            #                                                                  #
            # Note: Initialization of package manager is done at J             #
            #       initialization in this script.                             #
            #                                                                  #
            # Note: Some package manager verbs generate unwanted output.       #
            #       So we mostly clear this output.                            #
            ####################################################################
            if JsonObj['head']['fcode'] == 'pacman':

               # Check online status ###########################################
               if JsonObj['head']['scode'] == 'check':
                  # Check online
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'update\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ON'
                  JsonObj['data']          = s

               # Package status ################################################
               if JsonObj['head']['scode'] == 'status':
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'status\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ALL'
                  JsonObj['data']          = s

               # Get all packages ##############################################
               if JsonObj['head']['scode'] == 'getall':
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'inspac_qjide_ =: \'showinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'avapac_qjide_ =: \'shownotinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'avapac_qjide_ =: |:(0{|:avapac_qjide_), ' +
                      '(<\'\'),((1,2){|:avapac_qjide_)')
                  s = JObjects[CipAddr].Exec(
                      'allpac_qjide_ =: (/:(inspac_qjide_,avapac_qjide_)){' +
                      '(inspac_qjide_,avapac_qjide_)')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json <\"1 allpac_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ALL'
                  JsonObj['data']          = s

               # Get upgradeable packages ######################################
               if JsonObj['head']['scode'] == 'upgrades':
                  # Get upgradeable packages
                  s = JObjects[CipAddr].Exec(
                      'upgpac_qjide_ =: \'showupgrade\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json <\"1 upgpac_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'UPG'
                  JsonObj['data']          = s

               # Get installed packages ########################################
               if JsonObj['head']['scode'] == 'installed':
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'inspac_qjide_ =: \'showinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json <\"1 inspac_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'INS'
                  JsonObj['data']          = s

               # Get not installed packages ####################################
               if JsonObj['head']['scode'] == 'notinstalled':
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'avapac_qjide_ =: \'shownotinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                     'avapac_qjide_ =: |:(0{|:avapac_qjide_),(<\'\'),' +
                     '((1,2){|:avapac_qjide_)')
                  s = JObjects[CipAddr].Exec(
                     'tmpstr_qjide_ =: enc_json <\"1 avapac_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'NIN'
                  JsonObj['data']          = s

               # Get package categories ########################################
               if JsonObj['head']['scode'] == 'categories':
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'inspac_qjide_ =: \'showinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'avapac_qjide_ =: \'shownotinstalled\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'avapac_qjide_ =: ' +
                      '|:(0{|:avapac_qjide_),(<\'\'),((1,2){|:avapac_qjide_)')
                  s = JObjects[CipAddr].Exec(
                      'allpac_qjide_ =: ' +
                      '(/:(inspac_qjide_,avapac_qjide_)){' +
                      '(inspac_qjide_,avapac_qjide_)')
                  s = JObjects[CipAddr].Exec(
                      'allcat_qjide_ =: ' +
                      '(I.(~:(0{|:;:(>0{|:allpac_qjide_)))){' +
                      '(0{|:;:(>0{|:allpac_qjide_))')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json allcat_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ALL'
                  JsonObj['data']          = s

               # Get packages for selected category ############################
               if JsonObj['head']['scode'] == 'category':
                  # Category name
                  catnam = qjide_encode2(JsonObj['data'])
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'paccat_qjide_ =: \'search\' jpkg \'' + catnam + '\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json <\"1 paccat_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'ALL'
                  JsonObj['data']          = s

               # Get package info ##############################################
               if JsonObj['head']['scode'] == 'info':
                  # Package name
                  pacnam = qjide_encode2(JsonObj['data'])
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'sumpac_qjide_ =: \'show\' jpkg \'' + pacnam + '\'')
                  s = JObjects[CipAddr].Exec(
                      'hispac_qjide_ =: \'history\' jpkg \'' + pacnam + '\'')
                  s = JObjects[CipAddr].Exec(
                      'manpac_qjide_ =: \'manifest\' jpkg \'' + pacnam + '\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json 2 3 $ ' +
                      '(\'summary\';\'history\';\'manifest\'),' +
                      '(sumpac_qjide_;hispac_qjide_;manpac_qjide_)')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'SHM'
                  JsonObj['data']          = s

               # Update package info ###########################################
               if JsonObj['head']['scode'] == 'update':
                  # Check online
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'update\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Get J string
                  s = JObjects[CipAddr].Gets('tmpstr_qjide_')
                  s = json.loads(s,encoding='utf-8')
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'UPD'
                  JsonObj['data']          = s

               # Refresh local repository ######################################
               if JsonObj['head']['scode'] == 'refresh':
                  # Check online
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'update\' jpkg \'\'')
                  s = JObjects[CipAddr].Exec(
                      'tmpstr_qjide_ =: enc_json tmpobj_qjide_')
                  # Sometimes, some unwanted output is generated => clear it
                  JObjects[CipAddr].Drop()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'UPD'
                  JsonObj['data']          = ''

               # Install given package #########################################
               if JsonObj['head']['scode'] == 'install':
                  # Package name
                  pacnam = qjide_encode2(JsonObj['data'])
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'install\' jpkg \'' + pacnam + '\'')
                  # Get output
                  out = JObjects[CipAddr].Recv()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'INS'
                  JsonObj['data']          = out

               # Remove given package ##########################################
               if JsonObj['head']['scode'] == 'remove':
                  # Package name
                  pacnam = qjide_encode2(JsonObj['data'])
                  # Get all packages
                  s = JObjects[CipAddr].Exec(
                      'tmpobj_qjide_ =: \'remove\' jpkg \'' + pacnam + '\'')
                  # Get output
                  out = JObjects[CipAddr].Recv()
                  # Prepare return object
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = 'INS'
                  JsonObj['data']          = out

            ####################################################################
            # Terminal I/O                                                     #
            ####################################################################
            if JsonObj['head']['fcode'] == 'term':

               # Busy (waiting for output) #####################################
               if JsonObj['head']['scode'] == 'busy':
                  if JObjects[CipAddr].JIsBusy == True:
                     msg = 'true'
                  else:
                     msg = 'false'
                  if JObjects[CipAddr].JWForIn == True:
                     msg = 'false'
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = msg
                  JsonObj['data']          = JObjects[CipAddr].Prom()

               # Send command to J #############################################
               if JsonObj['head']['scode'] == 'send':
                  cmd = qjide_encode2(JsonObj['data'].strip())
                  JObjects[CipAddr].Send(cmd)
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = ''
                  JsonObj['data']          = JObjects[CipAddr].Prom()

               # Receive output from J #########################################
               if JsonObj['head']['scode'] == 'recv':
                  # Plot data
                  if JsonObj['data'].lower() == 'plot':
                     # Check if plot data already sent
                     if not PlotSent[CipAddr]:
                        # Mark plot data as sent
                        PlotSent[CipAddr] = True
                        # Send output string to the client
                        JsonObj['head']['rcode'] = 'INF'
                        JsonObj['head']['rmesg'] = ''
                        JsonObj['data']          = qjide_decode2(
                                                   PlotHtml[CipAddr])
                     else:
                        # Send empty plot data
                        JsonObj['head']['rcode'] = 'INF'
                        JsonObj['head']['rmesg'] = ''
                        JsonObj['data']          = qjide_decode2('')
                  # GUI/WWD data
                  elif JsonObj['data'].lower() == 'gui':
                     # Get GUI/WWD json object
                     gui = JObjects[CipAddr].Gets('wwdsend_qjide_')
                     s = JObjects[CipAddr].Exec('wwdsend_qjide_ =: \'\'')
                     # Send output string to the client
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = ''
                     JsonObj['data']          = qjide_decode2(gui)
                  # Raw/Text data / parse plot data
                  else:
                     out = JObjects[CipAddr].Recv()
                     # We assume that an output can contain text
                     # as well as html, so we split it up
                     idx = out.find('<!-- j html output a -->')
                     if idx >= 0:
                        pre = out[:idx]
                        pos = out[idx:]
                     else:
                        pre = out
                        pos = ''
                     # Parse output string,
                     # we could receive some html from viewmat or plot
                     if pos.startswith('<!-- j html output a -->'):
                        # This must be a plot output
                        tb1 = ('<table width="100%" height="100%"><tr>' +
                               '<td align="center" valign="middle">')
                        tb2 = '</td></tr></table>'
                        pos = pos.replace('<!-- j html output a -->',
                                          '<html><body>'+tb1,1)
                        pos = pos.replace('<!-- j html output z -->',
                                          tb2+'</body></html>',1)
                        pos = pos.replace('<!-- j html output a -->',
                                          '<html><body>')
                        pos = pos.replace('<!-- j html output z -->',
                                          '</body></html>')
                        pos = pos.replace('<!-- j js a -->',
                                          '<script language="javascript">')
                        pos = pos.replace('<!-- j js z -->','</script>')
                        pos = pos.replace('<!-- ;','')
                        pos = pos.replace(' -->','')
                        PlotHtml[CipAddr] = pos
                        PlotSent[CipAddr] = False
                        out = pre
                     else:
                        # Normal output => no action
                        pass
                     # Send output string to the client
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = ''
                     JsonObj['data']          = qjide_decode2(out +
                                                JObjects[CipAddr].Prom())

            ####################################################################
            # WWD (Web Window Driver)                                          #
            ####################################################################
            if JsonObj['head']['fcode'] == 'wwd':

               # Receive data and command from frontend ########################
               if JsonObj['head']['scode'] == 'event':
                  dat = qjide_encode2(JsonObj['data'][0].strip())
                  evt = qjide_encode2(JsonObj['data'][1].strip())
                  # Add two single quotes to evt, so evt becomes a J command
                  evt = evt + '\'\''
                  # Replace single single-quotes (') by double single-quotes ('')
                  dat = dat.replace('\'','\'\'')
                  s = JObjects[CipAddr].Exec('wwdinfo_qjide_ =: dec_json \'' +
                                             dat + '\'')
                  JObjects[CipAddr].Send(evt)
                  JsonObj['head']['rcode'] = 'INF'
                  JsonObj['head']['rmesg'] = ''
                  JsonObj['data']          = ''

               # Receive data and command from frontend ########################
               if JsonObj['head']['scode'] == 'start':
                  if WwdStart != '':
                     JObjects[CipAddr].Send(WwdStart)
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = 'START'
                     JsonObj['data']          = ''
                  else:
                     JsonObj['head']['rcode'] = 'INF'
                     JsonObj['head']['rmesg'] = ''
                     JsonObj['data']          = ''

            # Just for debugging ###############################################
            if VerBose == True:
               try:
                  print('SEND >>> ' + self.path)
                  print('TO   >>> ' + CipAddr)
                  print('fcode = ' + JsonObj['head']['fcode'])
                  print('scode = ' + JsonObj['head']['scode'])
                  print('rcode = ' + JsonObj['head']['rcode'])
                  print('rmesg = ' + JsonObj['head']['rmesg'])
                  print('data  = ' + str(JsonObj['data']))
               except:
                  print_exception_info()

         # Create JSON string from JSCON object, for response
         JsonStr = qjide_json_dumps(JsonObj)

         # Send response
         self.send_response(200)
         self.send_header('Content-Type','application/json' )
         self.send_header('Content-length',str(len(JsonStr)))
         self.end_headers()
         self.wfile.write(qjide_encode3(JsonStr))
         return

      except:

         # Print exception info
         print_exception_info()

         # Return exception to frontend
         try:
            JsonObj['head']['rcode'] = 'ERR'
            JsonObj['head']['rmesg'] = ('Exception in POST/handler: ' +
                                        str(sys.exc_info()))
            JsonObj['data']          = ''
            JsonStr = json.dumps(JsonObj)
            self.send_response(200)
            self.send_header('Content-Type','application/json' )
            self.send_header('Content-length',str(len(JsonStr)))
            self.end_headers()
            self.wfile.write(qjide_encode3(JsonStr))
         except:
            print_exception_info()
  
################################################################################
# Main Entry Point
################################################################################

# Start Server
if __name__  == '__main__':

   # Eval binaries folder
   if os.path.isabs(JBinFol):
      bf = os.path.join(JBinFol)
   else:
      bf = os.path.join(JInsFol,JBinFol)

   # Print some useful output
   print('[J IDE python web server, V2.2.2]')
   print('')
   print('Python:          ' + sys.version)
   print('')
   print('J Installation:  ' + JInsFol)
   print('J Binaries:      ' + bf     )
   print('')
   print('Web Address:     ' + SrvHost + ':' + str(SrvPort))
   print('Document Root:   ' + DocRoot)
   print('')
   print('Help Address:    ' + SrvHost + ':' + str(HlpPort))
   print('Help Root:       ' + HlpRoot)
   print('')

   # Start Help Handler/Server in a separate thread
   HelpServerThread = threading.Thread(target=StartHelpServer)
   HelpServerThread.start()

   # Open web browser
   if WebClnt == '':
      pass
   elif WebClnt == '<default>':
      webbrowser.open('http://' + SrvHost + ':' + str(SrvPort))
   else:
      subprocess.Popen(WebClnt + ' http://' + SrvHost + ':' + str(SrvPort))

   # Start HTTP server in main thread
   try:
      server = HTTPServer((SrvHost,SrvPort),ApplicationHandler)
      server.serve_forever()
   except KeyboardInterrupt:
      print('')
      print('Keyboard Interrupt ^C received.')
      HelpServ.shutdown()
      server.shutdown()
      print('')
      print('Server shutdown done, exiting.')
      sys.exit(0)

################################################################################
# EOF
################################################################################

